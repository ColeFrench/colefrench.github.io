{"version":3,"sources":["webpack://client/./node_modules/extend/index.js","webpack://client/./node_modules/inline-style-parser/index.js","webpack://client/./node_modules/is-buffer/index.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/createSuper.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://client/./node_modules/unist-util-stringify-position/lib/index.js","webpack://client/./node_modules/vfile-message/lib/index.js","webpack://client/./node_modules/vfile/lib/minpath.browser.js","webpack://client/./node_modules/vfile/lib/minproc.browser.js","webpack://client/./node_modules/vfile/lib/minurl.shared.js","webpack://client/./node_modules/vfile/lib/minurl.browser.js","webpack://client/./node_modules/vfile/lib/index.js","webpack://client/./node_modules/bail/index.js","webpack://client/./node_modules/unified/node_modules/is-plain-obj/index.js","webpack://client/./node_modules/trough/index.js","webpack://client/./node_modules/unified/lib/index.js","webpack://client/./node_modules/mdast-util-to-string/lib/index.js","webpack://client/./node_modules/micromark-util-chunked/index.js","webpack://client/./node_modules/micromark-util-combine-extensions/index.js","webpack://client/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://client/./node_modules/micromark-util-character/index.js","webpack://client/./node_modules/micromark-factory-space/index.js","webpack://client/./node_modules/micromark/lib/initialize/content.js","webpack://client/./node_modules/micromark/lib/initialize/document.js","webpack://client/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://client/./node_modules/micromark-util-subtokenize/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/content.js","webpack://client/./node_modules/micromark/lib/initialize/flow.js","webpack://client/./node_modules/micromark/lib/initialize/text.js","webpack://client/./node_modules/micromark-util-resolve-all/index.js","webpack://client/./node_modules/micromark/lib/create-tokenizer.js","webpack://client/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://client/./node_modules/micromark-core-commonmark/lib/list.js","webpack://client/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://client/./node_modules/micromark-factory-destination/index.js","webpack://client/./node_modules/micromark-factory-label/index.js","webpack://client/./node_modules/micromark-factory-title/index.js","webpack://client/./node_modules/micromark-factory-whitespace/index.js","webpack://client/./node_modules/micromark-util-normalize-identifier/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://client/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://client/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://client/./node_modules/micromark-util-html-tag-name/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://client/./node_modules/decode-named-character-reference/index.dom.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://client/./node_modules/micromark-util-classify-character/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://client/./node_modules/micromark/lib/constructs.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://client/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://client/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://client/./node_modules/micromark/lib/parse.js","webpack://client/./node_modules/micromark/lib/preprocess.js","webpack://client/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://client/./node_modules/micromark-util-decode-string/index.js","webpack://client/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://client/./node_modules/micromark/lib/postprocess.js","webpack://client/./node_modules/remark-parse/lib/index.js","webpack://client/./node_modules/micromark-util-sanitize-uri/index.js","webpack://client/./node_modules/unist-util-is/lib/index.js","webpack://client/./node_modules/unist-util-visit-parents/lib/index.js","webpack://client/./node_modules/unist-util-visit/lib/index.js","webpack://client/./node_modules/unist-util-position/lib/index.js","webpack://client/./node_modules/mdast-util-definitions/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://client/./node_modules/trim-lines/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/state.js","webpack://client/./node_modules/unist-util-generated/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://client/./node_modules/remark-rehype/lib/index.js","webpack://client/./node_modules/property-information/lib/util/schema.js","webpack://client/./node_modules/property-information/lib/util/merge.js","webpack://client/./node_modules/property-information/lib/normalize.js","webpack://client/./node_modules/property-information/lib/util/info.js","webpack://client/./node_modules/property-information/lib/util/types.js","webpack://client/./node_modules/property-information/lib/util/defined-info.js","webpack://client/./node_modules/property-information/lib/util/create.js","webpack://client/./node_modules/property-information/lib/xlink.js","webpack://client/./node_modules/property-information/lib/xml.js","webpack://client/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://client/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://client/./node_modules/property-information/lib/xmlns.js","webpack://client/./node_modules/property-information/lib/aria.js","webpack://client/./node_modules/property-information/lib/html.js","webpack://client/./node_modules/property-information/lib/svg.js","webpack://client/./node_modules/property-information/index.js","webpack://client/./node_modules/react-markdown/lib/rehype-filter.js","webpack://client/./node_modules/hast-util-whitespace/index.js","webpack://client/./node_modules/property-information/lib/find.js","webpack://client/./node_modules/property-information/lib/hast-to-react.js","webpack://client/./node_modules/style-to-object/index.mjs","webpack://client/./node_modules/react-markdown/lib/uri-transformer.js","webpack://client/./node_modules/react-markdown/lib/ast-to-react.js","webpack://client/./node_modules/comma-separated-tokens/index.js","webpack://client/./node_modules/space-separated-tokens/index.js","webpack://client/./node_modules/react-markdown/lib/react-markdown.js","webpack://client/./src/components/Markdown.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://client/./src/pages/Index.js","webpack://client/./src/data/about.md","webpack://client/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://client/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://client/./node_modules/style-to-object/index.js"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","_typeof","Symbol","iterator","_toPropertyKey","arg","input","hint","prim","toPrimitive","undefined","res","String","Number","_defineProperties","props","descriptor","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_getPrototypeOf","getPrototypeOf","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","result","Super","NewTarget","apply","_extends","assign","stringifyPosition","point","index","VFileMessage","place","origin","parts","super","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","map","includes","assertNonEmpty","assertPart","stem","encoding","part","bail","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","parameters","fnExpectsCallback","done","exception","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","add","plugin","plugins","entry","parse","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","title","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","checked","listItemValue","getData","setData","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","resume","codeFencedFence","lang","onexithardbreak","referenceType","fragment","labelText","ancestor","decodeString","resource","setextHeadingLineSequence","setextHeadingText","configure","combined","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","ordered","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","tests","checks","anyFactory","propsFactory","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","LinkRenderer","_ref","_objectDestructuringEmpty","__jsx","Link","_Component","subClass","superClass","_inherits","Markdown","Constructor","protoProps","staticProps","_super","_this","instance","_classCallCheck","markdown","_this2","fetch","response","setState","Component","Main","description","data-testid","About","u","b","for","f","g","h","l","n","q","t","a","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","StyleToObject","hasIterator","len"],"mappings":"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","file":"static/js/646.5935664d.chunk.js","sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\n\n// Make all hrefs react router links\nfunction LinkRenderer({ ...children }) {\n  return <Link {...children} />;\n}\n\nclass Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { markdown: '' };\n  }\n\n  componentDidMount() {\n    fetch(this.props.children)\n      .then((response) => response.text())\n      .then((text) => this.setState({ markdown: text }));\n  }\n\n  render() {\n    return <ReactMarkdown components={{ Link: LinkRenderer }}>{this.state.markdown}</ReactMarkdown>;\n  }\n}\n\nMarkdown.propTypes = { children: PropTypes.node.isRequired };\nexport default Markdown;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport Markdown from '../components/Markdown';\nimport About from '../data/about.md';\n\nfunction Index() {\n  return (\n    <Main description=\"Cole French's personal website.\">\n      <article className=\"post markdown\" id=\"index\">\n        <header>\n          <div className=\"title\">\n            <h2 data-testid=\"heading\"><Link to=\"/\">About</Link></h2>\n          </div>\n        </header>\n        <Markdown>{About}</Markdown>\n      </article>\n    </Main>\n  );\n}\n\nexport default Index;\n","module.exports = __webpack_public_path__ + \"static/media/about.35cfe99e.md\";","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"sourceRoot":""}