{"version":3,"sources":["webpack://client/./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://client/./node_modules/style-to-object/index.js","webpack://client/./node_modules/hast-util-whitespace/lib/index.js","webpack://client/./node_modules/property-information/lib/util/schema.js","webpack://client/./node_modules/property-information/lib/util/merge.js","webpack://client/./node_modules/property-information/lib/normalize.js","webpack://client/./node_modules/property-information/lib/util/info.js","webpack://client/./node_modules/property-information/lib/util/types.js","webpack://client/./node_modules/property-information/lib/util/defined-info.js","webpack://client/./node_modules/property-information/lib/util/create.js","webpack://client/./node_modules/property-information/lib/xlink.js","webpack://client/./node_modules/property-information/lib/xml.js","webpack://client/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://client/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://client/./node_modules/property-information/lib/xmlns.js","webpack://client/./node_modules/property-information/lib/aria.js","webpack://client/./node_modules/property-information/lib/html.js","webpack://client/./node_modules/property-information/lib/svg.js","webpack://client/./node_modules/property-information/index.js","webpack://client/./node_modules/property-information/lib/find.js","webpack://client/./node_modules/property-information/lib/hast-to-react.js","webpack://client/./node_modules/style-to-object/index.mjs","webpack://client/./node_modules/unist-util-position/lib/index.js","webpack://client/./node_modules/unist-util-stringify-position/lib/index.js","webpack://client/./node_modules/vfile-message/lib/index.js","webpack://client/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://client/./node_modules/comma-separated-tokens/index.js","webpack://client/./node_modules/space-separated-tokens/index.js","webpack://client/./node_modules/html-url-attributes/lib/index.js","webpack://client/./node_modules/mdast-util-to-string/lib/index.js","webpack://client/./node_modules/micromark-util-chunked/index.js","webpack://client/./node_modules/micromark-util-subtokenize/index.js","webpack://client/./node_modules/micromark-util-combine-extensions/index.js","webpack://client/./node_modules/micromark-util-character/index.js","webpack://client/./node_modules/micromark-factory-space/index.js","webpack://client/./node_modules/micromark/lib/initialize/content.js","webpack://client/./node_modules/micromark/lib/initialize/document.js","webpack://client/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://client/./node_modules/micromark-core-commonmark/lib/content.js","webpack://client/./node_modules/micromark/lib/initialize/flow.js","webpack://client/./node_modules/micromark/lib/initialize/text.js","webpack://client/./node_modules/micromark-util-resolve-all/index.js","webpack://client/./node_modules/micromark/lib/create-tokenizer.js","webpack://client/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://client/./node_modules/micromark-core-commonmark/lib/list.js","webpack://client/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://client/./node_modules/micromark-factory-destination/index.js","webpack://client/./node_modules/micromark-factory-label/index.js","webpack://client/./node_modules/micromark-factory-title/index.js","webpack://client/./node_modules/micromark-factory-whitespace/index.js","webpack://client/./node_modules/micromark-util-normalize-identifier/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://client/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://client/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://client/./node_modules/micromark-util-html-tag-name/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://client/./node_modules/decode-named-character-reference/index.dom.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://client/./node_modules/micromark-util-classify-character/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://client/./node_modules/micromark/lib/constructs.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://client/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://client/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://client/./node_modules/micromark/lib/parse.js","webpack://client/./node_modules/micromark/lib/preprocess.js","webpack://client/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://client/./node_modules/micromark-util-decode-string/index.js","webpack://client/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://client/./node_modules/micromark/lib/postprocess.js","webpack://client/./node_modules/remark-parse/lib/index.js","webpack://client/./node_modules/@ungap/structured-clone/esm/types.js","webpack://client/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://client/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://client/./node_modules/@ungap/structured-clone/esm/index.js","webpack://client/./node_modules/micromark-util-sanitize-uri/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://client/./node_modules/unist-util-is/lib/index.js","webpack://client/./node_modules/unist-util-visit-parents/lib/index.js","webpack://client/./node_modules/unist-util-visit/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://client/./node_modules/trim-lines/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/state.js","webpack://client/./node_modules/mdast-util-to-hast/lib/index.js","webpack://client/./node_modules/remark-rehype/lib/index.js","webpack://client/./node_modules/bail/index.js","webpack://client/./node_modules/unified/node_modules/is-plain-obj/index.js","webpack://client/./node_modules/trough/index.js","webpack://client/./node_modules/vfile/lib/minpath.browser.js","webpack://client/./node_modules/vfile/lib/minproc.browser.js","webpack://client/./node_modules/vfile/lib/minurl.shared.js","webpack://client/./node_modules/vfile/lib/minurl.browser.js","webpack://client/./node_modules/vfile/lib/index.js","webpack://client/./node_modules/unified/lib/callable-instance.js","webpack://client/./node_modules/unified/lib/index.js","webpack://client/./node_modules/react-markdown/lib/index.js","webpack://client/./src/components/Markdown.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://client/./src/pages/Index.js","webpack://client/./node_modules/inline-style-parser/index.js","webpack://client/./node_modules/react/jsx-runtime.js","webpack://client/./node_modules/extend/index.js","webpack://client/./src/data/about.md"],"names":["f","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","exports","Fragment","jsx","jsxs","parse","StyleToObject","style","iterator","declaration","output","property","value","declarations","hasIterator","i","len","length","module","re","empty","replace","Schema","normal","space","this","merge","definitions","index","assign","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","prop","properties","info","transform","attributes","includes","xlink","_","slice","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","name","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","src","srcDoc","srcLang","srcSet","start","step","tabIndex","target","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","charAt","toUpperCase","hastToReact","pointEnd","point","pointStart","node","position","line","column","undefined","stringifyPosition","pos","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","reason","options","legacyCause","place","ancestors","cause","message","ruleId","source","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","toJsxRuntime","tree","TypeError","filePath","development","jsxDEV","isStaticChildren","Array","isArray","children","columnNumber","fileName","lineNumber","developmentCreate","fn","state","components","elementAttributeNameCase","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","push","countsByTagName","child","count","get","set","createChildren","alignValue","createProperty","has","createProperties","pop","thing","Type","test","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","trim","styleObject","toCamel","error","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","toDash","$1","urlAttributes","icon","emptyOptions","includeImageAlt","includeHtml","Boolean","splice","remove","items","parameters","chunkStart","unshift","subtokenize","events","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","add","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","document","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","unicodePunctuation","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","instruction","tagOpen","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","autolink","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","listItemValue","expectingFirstListItemValue","listOrdered","listUnordered","reference","referenceType","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","characterReferenceType","resume","flowCodeInside","codeFencedFence","onexithardbreak","inReference","fragment","labelText","ancestor","decodeString","atHardBreak","setextHeadingSlurpLineEnding","setextHeadingLineSequence","codePointAt","setextHeadingText","configure","combined","mdastExtensions","tokenStack","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","siblings","ordered","compiler","postprocess","atCarriageReturn","match","endPosition","toString","TextDecoder","lastIndex","exec","Math","ceil","preprocess","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","arr","Date","flags","RegExp","BigInt","deserializer","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","testFunction","looksLikeANode","visitParents","visitor","reverse","factory","parents","defineProperty","visit","subresult","grandparents","toResult","nodeAsParent","concat","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","trimLines","last","lines","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","root","table","firstRow","tableContent","body","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","handlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","isPlainObject","getPrototypeOf","toStringTag","trough","fns","pipeline","middlewareIndex","callback","middleware","fnExpectsCallback","done","exception","Promise","then","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","constructor","func","arguments","setPrototypeOf","names","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","extend","assertUnfrozen","transformer","freeze","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","complete","process","assertDone","assertNode","outputTree","resultingTree","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","hasOwn","mdastTree","runSync","colon","questionMark","numberSign","LinkRenderer","_ref","t","_objectDestructuringEmpty","__jsx","Link","Markdown","Component","markdown","componentDidMount","fetch","response","setState","render","ReactMarkdown","Main","description","data-testid","About","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","comments","val","ret","decl","decls","toStr","gOPD","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","enumerable","configurable","newValue","writable","getProperty","copy","copyIsArray","clone","deep"],"mappings":"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","file":"static/js/491.733d3cb8.chunk.js","sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | undefined, [prop: string]: Array<Child> | Child | Element | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element' || node.type === 'root') {\n    const parentSchema = state.schema\n    let schema = parentSchema\n\n    if (\n      node.type === 'element' &&\n      node.tagName.toLowerCase() === 'svg' &&\n      parentSchema.space === 'html'\n    ) {\n      schema = svg\n      state.schema = schema\n    }\n\n    state.ancestors.push(node)\n\n    let children = createChildren(state, node)\n    const props = createProperties(state, state.ancestors)\n    let type = state.Fragment\n\n    state.ancestors.pop()\n\n    if (node.type === 'element') {\n      if (children && tableElements.has(node.tagName)) {\n        children = children.filter(function (child) {\n          return typeof child === 'string' ? !whitespace(child) : true\n        })\n      }\n\n      if (own.call(state.components, node.tagName)) {\n        const key = /** @type {keyof JSX.IntrinsicElements} */ (node.tagName)\n        type = state.components[key]\n\n        // If this is swapped out for a component:\n        if (\n          typeof type !== 'string' &&\n          type !== state.Fragment &&\n          state.passNode\n        ) {\n          props.node = node\n        }\n      } else {\n        type = node.tagName\n      }\n    }\n\n    if (children.length > 0) {\n      const value = children.length > 1 ? children : children[0]\n\n      if (value) {\n        props.children = value\n      }\n    }\n\n    // Restore parent schema.\n    state.schema = parentSchema\n\n    return state.create(node, type, props, key)\n  }\n\n  if (node.type === 'text') {\n    return node.value\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByTagName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys && child.type === 'element') {\n      const count = countsByTagName.get(child.tagName) || 0\n      key = child.tagName + '-' + count\n      countsByTagName.set(child.tagName, count + 1)\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle properties.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @returns {Props}\n *   Props for runtime.\n */\nfunction createProperties(state, ancestors) {\n  const node = ancestors[ancestors.length - 1]\n  /** @type {Props} */\n  const props = {}\n  /** @type {string} */\n  let prop\n\n  if ('properties' in node && node.properties) {\n    /** @type {string | undefined} */\n    let alignValue\n\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          state,\n          ancestors,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          const [key, value] = result\n\n          if (\n            state.tableCellAlignToStyle &&\n            key === 'align' &&\n            typeof value === 'string' &&\n            tableCellElement.has(node.tagName)\n          ) {\n            alignValue = value\n          } else {\n            props[key] = value\n          }\n        }\n      }\n    }\n\n    if (alignValue) {\n      // Assume style is an object.\n      const style = /** @type {Style} */ (props.style || (props.style = {}))\n      style[\n        state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'\n      ] = alignValue\n    }\n  }\n\n  return props\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, ancestors, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object'\n        ? value\n        : parseStyle(state, ancestors, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Nodes>} ancestors\n *   Stack of nodes.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, ancestors, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors,\n        cause,\n        source: 'hast-util-to-jsx-runtime',\n        ruleId: 'style'\n      })\n      message.file = state.filePath || undefined\n      message.url =\n        'https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55_295 && code < 57_344) ||\n    // Noncharacters.\n    (code > 64_975 && code < 65_008) /* eslint-disable no-bitwise */ ||\n    (code & 65_535) === 65_535 ||\n    (code & 65_535) === 65_534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1_114_111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (toHast(tree, options))\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (toHast(tree, options || destination))\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    // @ts-expect-error\n    // React components are allowed to return numbers,\n    // but not according to the types in hast-util-to-jsx-runtime\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\n\n// Make all hrefs react router links\nfunction LinkRenderer({ ...children }) {\n  return <Link {...children} />;\n}\n\nclass Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { markdown: '' };\n  }\n\n  componentDidMount() {\n    fetch(this.props.children)\n      .then((response) => response.text())\n      .then((text) => this.setState({ markdown: text }));\n  }\n\n  render() {\n    return <ReactMarkdown components={{ Link: LinkRenderer }}>{this.state.markdown}</ReactMarkdown>;\n  }\n}\n\nMarkdown.propTypes = { children: PropTypes.node.isRequired };\nexport default Markdown;\n","function _objectDestructuringEmpty(t) {\n  if (null == t) throw new TypeError(\"Cannot destructure \" + t);\n}\nexport { _objectDestructuringEmpty as default };","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport Markdown from '../components/Markdown';\nimport About from '../data/about.md';\n\nfunction Index() {\n  return (\n    <Main description=\"Cole French's personal website.\">\n      <article className=\"post markdown\" id=\"index\">\n        <header>\n          <div className=\"title\">\n            <h2 data-testid=\"heading\"><Link to=\"/\">About</Link></h2>\n          </div>\n        </header>\n        <Markdown>{About}</Markdown>\n      </article>\n    </Main>\n  );\n}\n\nexport default Index;\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","module.exports = __webpack_public_path__ + \"static/media/about.35cfe99e.md\";"],"sourceRoot":""}