{"version":3,"sources":["webpack://client/./node_modules/extend/index.js","webpack://client/./node_modules/inline-style-parser/index.js","webpack://client/./node_modules/is-buffer/index.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/createSuper.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://client/./node_modules/unist-util-stringify-position/lib/index.js","webpack://client/./node_modules/vfile-message/lib/index.js","webpack://client/./node_modules/vfile/lib/minpath.browser.js","webpack://client/./node_modules/vfile/lib/minproc.browser.js","webpack://client/./node_modules/vfile/lib/minurl.shared.js","webpack://client/./node_modules/vfile/lib/minurl.browser.js","webpack://client/./node_modules/vfile/lib/index.js","webpack://client/./node_modules/bail/index.js","webpack://client/./node_modules/is-plain-obj/index.js","webpack://client/./node_modules/trough/index.js","webpack://client/./node_modules/unified/lib/index.js","webpack://client/./node_modules/mdast-util-to-string/lib/index.js","webpack://client/./node_modules/micromark-util-chunked/index.js","webpack://client/./node_modules/micromark-util-combine-extensions/index.js","webpack://client/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://client/./node_modules/micromark-util-character/index.js","webpack://client/./node_modules/micromark-factory-space/index.js","webpack://client/./node_modules/micromark/lib/initialize/content.js","webpack://client/./node_modules/micromark/lib/initialize/document.js","webpack://client/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://client/./node_modules/micromark-util-subtokenize/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/content.js","webpack://client/./node_modules/micromark/lib/initialize/flow.js","webpack://client/./node_modules/micromark/lib/initialize/text.js","webpack://client/./node_modules/micromark-util-resolve-all/index.js","webpack://client/./node_modules/micromark/lib/create-tokenizer.js","webpack://client/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://client/./node_modules/micromark-core-commonmark/lib/list.js","webpack://client/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://client/./node_modules/micromark-factory-destination/index.js","webpack://client/./node_modules/micromark-factory-label/index.js","webpack://client/./node_modules/micromark-factory-title/index.js","webpack://client/./node_modules/micromark-factory-whitespace/index.js","webpack://client/./node_modules/micromark-util-normalize-identifier/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://client/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://client/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://client/./node_modules/micromark-util-html-tag-name/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://client/./node_modules/decode-named-character-reference/index.dom.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://client/./node_modules/micromark-util-classify-character/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://client/./node_modules/micromark/lib/constructs.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://client/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://client/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://client/./node_modules/micromark/lib/parse.js","webpack://client/./node_modules/micromark/lib/preprocess.js","webpack://client/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://client/./node_modules/micromark-util-decode-string/index.js","webpack://client/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://client/./node_modules/micromark/lib/postprocess.js","webpack://client/./node_modules/remark-parse/index.js","webpack://client/./node_modules/remark-parse/lib/index.js","webpack://client/./node_modules/micromark-util-sanitize-uri/index.js","webpack://client/./node_modules/unist-util-is/lib/index.js","webpack://client/./node_modules/unist-util-visit-parents/lib/index.js","webpack://client/./node_modules/unist-util-visit/lib/index.js","webpack://client/./node_modules/unist-util-position/lib/index.js","webpack://client/./node_modules/mdast-util-definitions/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://client/./node_modules/trim-lines/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/state.js","webpack://client/./node_modules/unist-util-generated/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://client/./node_modules/remark-rehype/lib/index.js","webpack://client/./node_modules/property-information/lib/util/schema.js","webpack://client/./node_modules/property-information/lib/util/merge.js","webpack://client/./node_modules/property-information/lib/normalize.js","webpack://client/./node_modules/property-information/lib/util/info.js","webpack://client/./node_modules/property-information/lib/util/types.js","webpack://client/./node_modules/property-information/lib/util/defined-info.js","webpack://client/./node_modules/property-information/lib/util/create.js","webpack://client/./node_modules/property-information/lib/xlink.js","webpack://client/./node_modules/property-information/lib/xml.js","webpack://client/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://client/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://client/./node_modules/property-information/lib/xmlns.js","webpack://client/./node_modules/property-information/lib/aria.js","webpack://client/./node_modules/property-information/lib/html.js","webpack://client/./node_modules/property-information/lib/svg.js","webpack://client/./node_modules/property-information/index.js","webpack://client/./node_modules/react-markdown/lib/rehype-filter.js","webpack://client/./node_modules/hast-util-whitespace/index.js","webpack://client/./node_modules/property-information/lib/find.js","webpack://client/./node_modules/property-information/lib/hast-to-react.js","webpack://client/./node_modules/style-to-object/index.mjs","webpack://client/./node_modules/react-markdown/lib/uri-transformer.js","webpack://client/./node_modules/react-markdown/lib/ast-to-react.js","webpack://client/./node_modules/comma-separated-tokens/index.js","webpack://client/./node_modules/space-separated-tokens/index.js","webpack://client/./node_modules/react-markdown/lib/react-markdown.js","webpack://client/./src/components/Markdown.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://client/./src/pages/Index.js","webpack://client/./src/data/about.md","webpack://client/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://client/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://client/./node_modules/style-to-object/index.js"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","_defineProperties","props","descriptor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_getPrototypeOf","getPrototypeOf","_typeof","Symbol","iterator","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","e","result","Super","NewTarget","apply","_extends","assign","stringifyPosition","point","index","VFileMessage","place","origin","parts","super","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","map","includes","assertNonEmpty","assertPart","stem","encoding","part","bail","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","parameters","fnExpectsCallback","done","exception","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","add","plugin","plugins","entry","parse","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","one","includeImageAlt","alt","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","gap","tailExitIndex","headEnterIndex","extensions","combineExtensions","concat","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","fromMarkdown","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","checked","listItemValue","getData","setData","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","resume","codeFencedFence","lang","onexithardbreak","referenceType","fragment","labelText","ancestor","decodeString","resource","setextHeadingLineSequence","setextHeadingText","configure","combined","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","ordered","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","normalizeUri","skip","encodeURIComponent","convert","castFactory","tests","checks","anyFactory","propsFactory","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","LinkRenderer","Markdown","subClass","superClass","Constructor","protoProps","staticProps","instance","markdown","fetch","response","setState","Link","Component","Main","description","data-testid","About","u","b","for","f","g","h","l","n","q","t","a","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","StyleToObject","hasIterator","len"],"mappings":"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","file":"static/js/992.532bd0fd.chunk.js","sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\n\n// Make all hrefs react router links\nfunction LinkRenderer({ ...children }) {\n  return <Link {...children} />;\n}\n\nclass Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { markdown: '' };\n  }\n\n  componentDidMount() {\n    fetch(this.props.children)\n      .then((response) => response.text())\n      .then((text) => this.setState({ markdown: text }));\n  }\n\n  render() {\n    return <ReactMarkdown components={{ Link: LinkRenderer }}>{this.state.markdown}</ReactMarkdown>;\n  }\n}\n\nMarkdown.propTypes = { children: PropTypes.node.isRequired };\nexport default Markdown;\n","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport Markdown from '../components/Markdown';\nimport About from '../data/about.md';\n\nfunction Index() {\n  return (\n    <Main description=\"Cole French's personal website.\">\n      <article className=\"post markdown\" id=\"index\">\n        <header>\n          <div className=\"title\">\n            <h2 data-testid=\"heading\"><Link to=\"/\">About</Link></h2>\n          </div>\n        </header>\n        <Markdown>{About}</Markdown>\n      </article>\n    </Main>\n  );\n}\n\nexport default Index;\n","module.exports = __webpack_public_path__ + \"static/media/about.35cfe99e.md\";","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"sourceRoot":""}