{"version":3,"sources":["webpack://client/./node_modules/extend/index.js","webpack://client/./node_modules/inline-style-parser/index.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/createSuper.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://client/./node_modules/hast-util-whitespace/lib/index.js","webpack://client/./node_modules/property-information/lib/util/schema.js","webpack://client/./node_modules/property-information/lib/util/merge.js","webpack://client/./node_modules/property-information/lib/normalize.js","webpack://client/./node_modules/property-information/lib/util/info.js","webpack://client/./node_modules/property-information/lib/util/types.js","webpack://client/./node_modules/property-information/lib/util/defined-info.js","webpack://client/./node_modules/property-information/lib/util/create.js","webpack://client/./node_modules/property-information/lib/xlink.js","webpack://client/./node_modules/property-information/lib/xml.js","webpack://client/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://client/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://client/./node_modules/property-information/lib/xmlns.js","webpack://client/./node_modules/property-information/lib/aria.js","webpack://client/./node_modules/property-information/lib/html.js","webpack://client/./node_modules/property-information/lib/svg.js","webpack://client/./node_modules/property-information/index.js","webpack://client/./node_modules/property-information/lib/find.js","webpack://client/./node_modules/property-information/lib/hast-to-react.js","webpack://client/./node_modules/style-to-object/index.mjs","webpack://client/./node_modules/unist-util-position/lib/index.js","webpack://client/./node_modules/unist-util-stringify-position/lib/index.js","webpack://client/./node_modules/vfile-message/lib/index.js","webpack://client/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://client/./node_modules/comma-separated-tokens/index.js","webpack://client/./node_modules/space-separated-tokens/index.js","webpack://client/./node_modules/html-url-attributes/lib/index.js","webpack://client/./node_modules/mdast-util-to-string/lib/index.js","webpack://client/./node_modules/micromark-util-chunked/index.js","webpack://client/./node_modules/micromark-util-subtokenize/index.js","webpack://client/./node_modules/micromark-util-combine-extensions/index.js","webpack://client/./node_modules/micromark-util-character/index.js","webpack://client/./node_modules/micromark-factory-space/index.js","webpack://client/./node_modules/micromark/lib/initialize/content.js","webpack://client/./node_modules/micromark/lib/initialize/document.js","webpack://client/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://client/./node_modules/micromark-core-commonmark/lib/content.js","webpack://client/./node_modules/micromark/lib/initialize/flow.js","webpack://client/./node_modules/micromark/lib/initialize/text.js","webpack://client/./node_modules/micromark-util-resolve-all/index.js","webpack://client/./node_modules/micromark/lib/create-tokenizer.js","webpack://client/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://client/./node_modules/micromark-core-commonmark/lib/list.js","webpack://client/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://client/./node_modules/micromark-factory-destination/index.js","webpack://client/./node_modules/micromark-factory-label/index.js","webpack://client/./node_modules/micromark-factory-title/index.js","webpack://client/./node_modules/micromark-factory-whitespace/index.js","webpack://client/./node_modules/micromark-util-normalize-identifier/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://client/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://client/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://client/./node_modules/micromark-util-html-tag-name/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://client/./node_modules/decode-named-character-reference/index.dom.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://client/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://client/./node_modules/micromark-util-classify-character/index.js","webpack://client/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://client/./node_modules/micromark/lib/constructs.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://client/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://client/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://client/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://client/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://client/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://client/./node_modules/micromark/lib/parse.js","webpack://client/./node_modules/micromark/lib/preprocess.js","webpack://client/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://client/./node_modules/micromark-util-decode-string/index.js","webpack://client/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://client/./node_modules/micromark/lib/postprocess.js","webpack://client/./node_modules/remark-parse/lib/index.js","webpack://client/./node_modules/@ungap/structured-clone/esm/types.js","webpack://client/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://client/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://client/./node_modules/@ungap/structured-clone/esm/index.js","webpack://client/./node_modules/micromark-util-sanitize-uri/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://client/./node_modules/unist-util-is/lib/index.js","webpack://client/./node_modules/unist-util-visit-parents/lib/index.js","webpack://client/./node_modules/unist-util-visit/lib/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://client/./node_modules/trim-lines/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://client/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://client/./node_modules/mdast-util-to-hast/lib/state.js","webpack://client/./node_modules/mdast-util-to-hast/lib/index.js","webpack://client/./node_modules/remark-rehype/lib/index.js","webpack://client/./node_modules/bail/index.js","webpack://client/./node_modules/unified/node_modules/is-plain-obj/index.js","webpack://client/./node_modules/trough/index.js","webpack://client/./node_modules/vfile/lib/minpath.browser.js","webpack://client/./node_modules/vfile/lib/minproc.browser.js","webpack://client/./node_modules/vfile/lib/minurl.shared.js","webpack://client/./node_modules/vfile/lib/minurl.browser.js","webpack://client/./node_modules/vfile/lib/index.js","webpack://client/./node_modules/unified/lib/callable-instance.js","webpack://client/./node_modules/unified/lib/index.js","webpack://client/./node_modules/react-markdown/lib/index.js","webpack://client/./src/components/Markdown.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://client/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://client/./src/pages/Index.js","webpack://client/./src/data/about.md","webpack://client/./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://client/./node_modules/react/jsx-runtime.js","webpack://client/./node_modules/style-to-object/index.js"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","_typeof","o","Symbol","iterator","_toPropertyKey","arg","input","hint","prim","toPrimitive","undefined","res","String","Number","_defineProperties","props","descriptor","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_getPrototypeOf","getPrototypeOf","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","result","Super","NewTarget","apply","_extends","assign","empty","Schema","normal","space","merge","definitions","index","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","properties","info","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","toUpperCase","hastToReact","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsx","jsxs","fn","state","components","elementAttributeNameCase","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","countsByTagName","child","count","get","set","createChildren","alignValue","createProperty","has","createProperties","pop","thing","Type","test","rest","dashes","find","isNaN","settings","join","padRight","padLeft","styleObject","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","toDash","$1","urlAttributes","icon","emptyOptions","includeImageAlt","includeHtml","splice","remove","items","parameters","chunkStart","unshift","subtokenize","events","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","add","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","document","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","unicodePunctuation","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","autolink","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","listItemValue","expectingFirstListItemValue","listOrdered","listUnordered","reference","referenceType","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","characterReferenceType","resume","flowCodeInside","codeFencedFence","onexithardbreak","inReference","fragment","labelText","ancestor","decodeString","atHardBreak","setextHeadingSlurpLineEnding","setextHeadingLineSequence","codePointAt","setextHeadingText","configure","combined","mdastExtensions","tokenStack","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","siblings","ordered","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","Math","ceil","preprocess","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","deserializer","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","toJSON","entries","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","testFunction","looksLikeANode","visitParents","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","concat","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","root","table","firstRow","tableContent","body","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","handlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","toStringTag","trough","fns","pipeline","middlewareIndex","callback","output","middleware","fnExpectsCallback","done","exception","Promise","then","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","func","names","getOwnPropertyNames","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","transformer","freeze","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","parse","realDone","compileTree","compileResult","complete","process","assertDone","assertNode","outputTree","resultingTree","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","runSync","colon","questionMark","numberSign","LinkRenderer","_ref","_objectDestructuringEmpty","__jsx","Link","_Component","subClass","superClass","_inherits","Markdown","Constructor","protoProps","staticProps","_super","_this","instance","_classCallCheck","markdown","_this2","fetch","response","setState","ReactMarkdown","Component","Main","description","data-testid","About","f","for","l","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ref","__self","__source","q","a","g","b","h","defaultProps","$$typeof","_owner","StyleToObject","hasIterator","len"],"mappings":"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","file":"static/js/744.3e014d00.chunk.js","sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | undefined, [prop: string]: Array<Child> | Child | Element | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element' || node.type === 'root') {\n    const parentSchema = state.schema\n    let schema = parentSchema\n\n    if (\n      node.type === 'element' &&\n      node.tagName.toLowerCase() === 'svg' &&\n      parentSchema.space === 'html'\n    ) {\n      schema = svg\n      state.schema = schema\n    }\n\n    state.ancestors.push(node)\n\n    let children = createChildren(state, node)\n    const props = createProperties(state, state.ancestors)\n    let type = state.Fragment\n\n    state.ancestors.pop()\n\n    if (node.type === 'element') {\n      if (children && tableElements.has(node.tagName)) {\n        children = children.filter(function (child) {\n          return typeof child === 'string' ? !whitespace(child) : true\n        })\n      }\n\n      if (own.call(state.components, node.tagName)) {\n        const key = /** @type {keyof JSX.IntrinsicElements} */ (node.tagName)\n        type = state.components[key]\n\n        // If this is swapped out for a component:\n        if (\n          typeof type !== 'string' &&\n          type !== state.Fragment &&\n          state.passNode\n        ) {\n          props.node = node\n        }\n      } else {\n        type = node.tagName\n      }\n    }\n\n    if (children.length > 0) {\n      const value = children.length > 1 ? children : children[0]\n\n      if (value) {\n        props.children = value\n      }\n    }\n\n    // Restore parent schema.\n    state.schema = parentSchema\n\n    return state.create(node, type, props, key)\n  }\n\n  if (node.type === 'text') {\n    return node.value\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByTagName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys && child.type === 'element') {\n      const count = countsByTagName.get(child.tagName) || 0\n      key = child.tagName + '-' + count\n      countsByTagName.set(child.tagName, count + 1)\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle properties.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @returns {Props}\n *   Props for runtime.\n */\nfunction createProperties(state, ancestors) {\n  const node = ancestors[ancestors.length - 1]\n  /** @type {Props} */\n  const props = {}\n  /** @type {string} */\n  let prop\n\n  if ('properties' in node && node.properties) {\n    /** @type {string | undefined} */\n    let alignValue\n\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          state,\n          ancestors,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          const [key, value] = result\n\n          if (\n            state.tableCellAlignToStyle &&\n            key === 'align' &&\n            typeof value === 'string' &&\n            tableCellElement.has(node.tagName)\n          ) {\n            alignValue = value\n          } else {\n            props[key] = value\n          }\n        }\n      }\n    }\n\n    if (alignValue) {\n      // Assume style is an object.\n      const style = /** @type {Style} */ (props.style || (props.style = {}))\n      style[\n        state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'\n      ] = alignValue\n    }\n  }\n\n  return props\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, ancestors, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object'\n        ? value\n        : parseStyle(state, ancestors, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Nodes>} ancestors\n *   Stack of nodes.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, ancestors, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors,\n        cause,\n        source: 'hast-util-to-jsx-runtime',\n        ruleId: 'style'\n      })\n      message.file = state.filePath || undefined\n      message.url =\n        'https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55_295 && code < 57_344) ||\n    // Noncharacters.\n    (code > 64_975 && code < 65_008) /* eslint-disable no-bitwise */ ||\n    (code & 65_535) === 65_535 ||\n    (code & 65_535) === 65_534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1_114_111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (toHast(tree, options))\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (toHast(tree, options || destination))\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\n\n// Make all hrefs react router links\nfunction LinkRenderer({ ...children }) {\n  return <Link {...children} />;\n}\n\nclass Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { markdown: '' };\n  }\n\n  componentDidMount() {\n    fetch(this.props.children)\n      .then((response) => response.text())\n      .then((text) => this.setState({ markdown: text }));\n  }\n\n  render() {\n    return <ReactMarkdown components={{ Link: LinkRenderer }}>{this.state.markdown}</ReactMarkdown>;\n  }\n}\n\nMarkdown.propTypes = { children: PropTypes.node.isRequired };\nexport default Markdown;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport Markdown from '../components/Markdown';\nimport About from '../data/about.md';\n\nfunction Index() {\n  return (\n    <Main description=\"Cole French's personal website.\">\n      <article className=\"post markdown\" id=\"index\">\n        <header>\n          <div className=\"title\">\n            <h2 data-testid=\"heading\"><Link to=\"/\">About</Link></h2>\n          </div>\n        </header>\n        <Markdown>{About}</Markdown>\n      </article>\n    </Main>\n  );\n}\n\nexport default Index;\n","module.exports = __webpack_public_path__ + \"static/media/about.35cfe99e.md\";","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"sourceRoot":""}